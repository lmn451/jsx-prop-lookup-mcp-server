name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npm run build
      
    - name: Run tests
      run: npm test
      
    - name: Run linting (if available)
      run: npm run lint || echo "No lint script found, skipping..."
      continue-on-error: true

  publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Check for changes since last release
      id: changes
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LATEST_TAG" ]; then
          echo "No previous tags found, proceeding with publish"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        else
          # Check if there are changes since the last tag
          CHANGES=$(git diff --name-only $LATEST_TAG..HEAD -- . ':!.github' ':!README.md' ':!*.md' || echo "changes")
          if [ -n "$CHANGES" ]; then
            echo "Changes detected since $LATEST_TAG"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No significant changes since $LATEST_TAG"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        fi
        
    - name: Determine version bump type
      id: version_bump
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        # Check commit messages for version bump hints
        COMMITS=$(git log --oneline $(git describe --tags --abbrev=0 2>/dev/null || echo "")..HEAD 2>/dev/null || git log --oneline -10)
        
        if echo "$COMMITS" | grep -qE "(BREAKING CHANGE|major:)"; then
          echo "bump_type=major" >> $GITHUB_OUTPUT
        elif echo "$COMMITS" | grep -qE "(feat:|feature:|minor:)"; then
          echo "bump_type=minor" >> $GITHUB_OUTPUT
        else
          echo "bump_type=patch" >> $GITHUB_OUTPUT
        fi
        
    - name: Bump version
      id: bump_version
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        BUMP_TYPE=${{ steps.version_bump.outputs.bump_type }}
        echo "Bumping version with type: $BUMP_TYPE"
        
        # Bump version
        npm version $BUMP_TYPE --no-git-tag-version
        
        # Get the new version
        NEW_VERSION=$(node -p "require('./package.json').version")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"
        
    - name: Build project
      if: steps.changes.outputs.has_changes == 'true'
      run: npm run build
      
    - name: Run tests before publish
      if: steps.changes.outputs.has_changes == 'true'
      run: npm test
      
    - name: Publish to npm
      if: steps.changes.outputs.has_changes == 'true'
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Commit version bump and create tag
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
        git add package.json package-lock.json
        git commit -m "chore: bump version to v$NEW_VERSION [skip ci]"
        git tag "v$NEW_VERSION"
        git push origin HEAD --tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create GitHub Release
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}
        release_name: Release v${{ steps.bump_version.outputs.new_version }}
        body: |
          ## Changes in v${{ steps.bump_version.outputs.new_version }}
          
          This release was automatically generated from the latest commits.
          
          ### Commit Messages:
          ```
          ${{ github.event.head_commit.message }}
          ```
          
          ### Type: ${{ steps.version_bump.outputs.bump_type }} release
          
          For detailed changes, see the [commit history](https://github.com/${{ github.repository }}/commits/v${{ steps.bump_version.outputs.new_version }}).
        draft: false
        prerelease: false